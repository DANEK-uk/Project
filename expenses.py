import os
import sqlite3
from datetime import datetime


class Expense:
    def __init__(self, amount: float, category: str, date: str = None):
        self.amount = amount
        self.category = category
        self.date = date if date else datetime.now().strftime('%Y-%m-%d')

    def __str__(self):
        return f"{self.date} | {self.category} | {self.amount:.2f} —Ä—É–±."


class ExpenseTracker:
    def __init__(self, db_name: str = "expenses.db"):
        self.db_name = db_name
        self.conn = sqlite3.connect(self.db_name)
        self.cursor = self.conn.cursor()

        self.current_table = self._get_current_month_table()
        self._create_month_table_if_not_exists()

    def _get_current_month_table(self) -> str:
        now = datetime.now()
        return f"expenses_{now.year}_{now.month:02d}"

    def _create_month_table_if_not_exists(self):
        self.cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.current_table} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                category TEXT NOT NULL,
                amount REAL NOT NULL
            )
        """)
        self.conn.commit()

    def add_expense(self, expense: Expense):
        self.cursor.execute(f"""
            INSERT INTO {self.current_table} (date, category, amount)
            VALUES (?, ?, ?)
        """, (expense.date, expense.category, expense.amount))
        self.conn.commit()

    def show_expenses(self):
        self.cursor.execute(f"SELECT date, category, amount FROM {self.current_table}")
        rows = self.cursor.fetchall()
        if not rows:
            print("–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            for row in rows:
                print(f"{row[0]} | {row[1]} | {row[2]:.2f} —Ä—É–±.")

    def total_current_month(self):
        self.cursor.execute(f"SELECT SUM(amount) FROM {self.current_table}")
        total = self.cursor.fetchone()[0]
        total = total if total else 0
        print(f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {total:.2f} —Ä—É–±.")

    def close(self):
        self.conn.close()


def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not os.path.exists("expenses.db"):
        print("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é...")
    else:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞.")

    tracker = ExpenseTracker()

    while True:
        print("\n--- –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ---")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
        print("3. –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü")
        print("4. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == '1':
            try:
                amount = float(input("–°—É–º–º–∞: "))
                category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ")
                tracker.add_expense(Expense(amount, category))
                print("‚úî –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif choice == '2':
            tracker.show_expenses()

        elif choice == '3':
            tracker.total_current_month()

        elif choice == '4':
            tracker.close()
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()
1
2
3
4
5
6
7
